version: '3.8'

services:
  # ‚îÄ‚îÄ DATABASE ‚îÄ‚îÄ
  db:
    image: mariadb:${MARIADB_VERSION:-11.5}
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${WORDPRESS_DB_NAME}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - wordpress_network

  # ‚îÄ‚îÄ REDIS ‚îÄ‚îÄ
  redis:
    image: redis:${REDIS_VERSION:-alpine}
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - wordpress_network

  # ‚îÄ‚îÄ WORDPRESS ‚îÄ‚îÄ
  wordpress:
    image: wordpress:latest
    restart: unless-stopped
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "8080:80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # PHP upload configuration via environment variables (official WordPress image)
      WORDPRESS_UPLOAD_LIMIT: ${UPLOAD_MAX_FILESIZE:-64M}
      WORDPRESS_MEMORY_LIMIT: ${MEMORY_LIMIT:-256M}
      # Try PHP environment variables
      PHP_UPLOAD_MAX_FILESIZE: ${UPLOAD_MAX_FILESIZE:-64M}
      PHP_POST_MAX_SIZE: ${POST_MAX_SIZE:-64M}
      PHP_MEMORY_LIMIT: ${MEMORY_LIMIT:-256M}
      WORDPRESS_CONFIG_EXTRA: |
        if (!defined('WP_REDIS_HOST')) define('WP_REDIS_HOST', 'redis');
        if (!defined('WP_REDIS_PORT')) define('WP_REDIS_PORT', 6379);
        if (!defined('WP_REDIS_DATABASE')) define('WP_REDIS_DATABASE', 0);
        if (!defined('WP_REDIS_PASSWORD')) define('WP_REDIS_PASSWORD', '');
        if (!defined('WP_CACHE')) define('WP_CACHE', true);
        
        # Increase upload limits for high-resolution images
        define('WP_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        define('WP_MAX_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        
        # Force PHP upload settings - using override approach
        @ini_set('upload_max_filesize', '${UPLOAD_MAX_FILESIZE:-64M}');
        @ini_set('post_max_size', '${POST_MAX_SIZE:-64M}');
        @ini_set('memory_limit', '${MEMORY_LIMIT:-256M}');
        @ini_set('max_execution_time', '${MAX_EXECUTION_TIME:-300}');
        @ini_set('max_input_vars', '${MAX_INPUT_VARS:-3000}');
        
        # Upload limits handled by Must-Use plugin (see wp-content/mu-plugins/force-upload-limits.php)
        
        # WordPress constants for upload handling
        if (!defined('WP_MEMORY_LIMIT')) define('WP_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        if (!defined('WP_MAX_MEMORY_LIMIT')) define('WP_MAX_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        
        if (!defined('WP_DEBUG')) define('WP_DEBUG', false);
        if (!defined('WP_DEBUG_LOG')) define('WP_DEBUG_LOG', false);
    volumes:
      - wordpress_data:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./plugins:/var/www/html/wp-content/plugins
      - ./themes:/var/www/html/wp-content/themes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - wordpress_network

  # ‚îÄ‚îÄ SINGLE INITIALIZATION SERVICE ‚îÄ‚îÄ
  wp-init:
    image: wordpress:cli
    restart: "no"
    user: "0:0"
    depends_on:
      db:
        condition: service_started
      wordpress:
        condition: service_healthy
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      WORDPRESS_TITLE: ${WORDPRESS_TITLE:-WordPress Multisite}
      WORDPRESS_ADMIN_USER: ${WORDPRESS_ADMIN_USER:-admin}
      WORDPRESS_ADMIN_PASSWORD: ${WORDPRESS_ADMIN_PASSWORD:-admin123}
      WORDPRESS_ADMIN_EMAIL: ${WORDPRESS_ADMIN_EMAIL:-admin@example.com}
      DOMAIN_CURRENT_SITE: ${DOMAIN_CURRENT_SITE:-localhost:8080}
      SUBDOMAIN_INSTALL: ${SUBDOMAIN_INSTALL:-false}
      INSTALL_WORDFENCE: ${INSTALL_WORDFENCE:-true}
      INSTALL_YOAST_SEO: ${INSTALL_YOAST_SEO:-true}
      INSTALL_CONTACT_FORM_7: ${INSTALL_CONTACT_FORM_7:-true}
      INSTALL_WOOCOMMERCE: ${INSTALL_WOOCOMMERCE:-true}
      INSTALL_ELEMENTOR: ${INSTALL_ELEMENTOR:-true}
      INSTALL_GOOGLE_SITE_KIT: ${INSTALL_GOOGLE_SITE_KIT:-true}
      INSTALL_UPDRAFTPLUS: ${INSTALL_UPDRAFTPLUS:-true}
      INSTALL_NS_CLONER: ${INSTALL_NS_CLONER:-true}
      HOME: /tmp
    working_dir: /var/www/html
    volumes:
      - wordpress_data:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./plugins:/var/www/html/wp-content/plugins
      - ./themes:/var/www/html/wp-content/themes
    command:
      - bash
      - -c
      - |
        set -e
        
        echo "üöÄ Starting WordPress initialization..."
        
        # Wait for database and WordPress to be ready
        echo "‚è≥ Waiting for database and WordPress to be ready..."
        
        # Wait for database
        echo "üîç Checking database connection..."
        until mysql -h ${WORDPRESS_DB_HOST} -u root -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1" >/dev/null 2>&1; do
          echo "‚è≥ Waiting for database to be ready..."
          sleep 2
        done
        echo "‚úÖ Database is ready"
        
        # Wait for WordPress to be accessible
        echo "üîç Waiting for WordPress to be accessible..."
        until curl -f http://localhost/wp-admin/install.php >/dev/null 2>&1 || curl -f http://localhost/ >/dev/null 2>&1; do
          echo "‚è≥ Waiting for WordPress to be ready..."
          sleep 3
        done
        echo "‚úÖ WordPress is ready"
        
        # Give WordPress a moment to fully initialize
        echo "‚è≥ Allowing WordPress to fully initialize..."
        sleep 5
        
        # 1. FIX UPLOAD PERMISSIONS (consolidated from permfix-uploads)
        echo "üîß Setting up upload directory permissions..."
        
        # Create main site upload directories
        mkdir -p /var/www/html/wp-content/uploads/2025/08 || echo "‚ö†Ô∏è Main upload directory creation failed, continuing..."
        mkdir -p /var/www/html/wp-content/uploads/sites || echo "‚ö†Ô∏è Multisite upload directory creation failed, continuing..."
        
        # Create year/month structure for current and next year
        current_year=$(date +%Y)
        next_year=$((current_year + 1))
        for year in $current_year $next_year; do
          for month in $(seq -w 1 12); do
            mkdir -p "/var/www/html/wp-content/uploads/$year/$month" || echo "‚ö†Ô∏è Year/month dir creation failed, continuing..."
          done
        done
        
        # Create common plugin directories
        mkdir -p /var/www/html/wp-content/uploads/elementor || echo "‚ö†Ô∏è Elementor dir creation failed, continuing..."
        mkdir -p /var/www/html/wp-content/uploads/unlimited_elements || echo "‚ö†Ô∏è Unlimited Elements dir creation failed, continuing..."
        mkdir -p /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "‚ö†Ô∏è Unlimited Elements cache dir creation failed, continuing..."
        
        # Set proper permissions and ownership
        chown -R 33:33 /var/www/html/wp-content || echo "‚ö†Ô∏è Ownership change failed, continuing..."
        chmod -R 755 /var/www/html/wp-content/uploads || echo "‚ö†Ô∏è Permission change failed, continuing..."
        chmod 777 /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "‚ö†Ô∏è Unlimited elements cache chmod failed, continuing..."
        
        # Create security .htaccess for uploads
        echo "Options -Indexes" > /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess creation failed, continuing..."
        echo "Order deny,allow" >> /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess line failed, continuing..."
        echo "Deny from all" >> /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess line failed, continuing..."
        echo '<FilesMatch "\.(jpg|jpeg|png|gif|webp|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|zip|rar)$">' >> /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess line failed, continuing..."
        echo "    Allow from all" >> /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess line failed, continuing..."
        echo "</FilesMatch>" >> /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess line failed, continuing..."
        echo '<FilesMatch "\.(php|php3|php4|php5|phtml|pl|py|jsp|asp|sh|cgi)$">' >> /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess line failed, continuing..."
        echo "    Deny from all" >> /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess line failed, continuing..."
        echo "</FilesMatch>" >> /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess line failed, continuing..."
        chown 33:33 /var/www/html/wp-content/uploads/.htaccess || echo "‚ö†Ô∏è htaccess ownership failed, continuing..."
        
        echo "‚úÖ Upload permissions fixed successfully"
        
        # 2. CHECK IF WORDPRESS IS INSTALLED
        if ! su -s /bin/sh www-data -c "wp core is-installed" 2>/dev/null; then
          echo "üì¶ Installing WordPress..."
          
          # Install WordPress
          su -s /bin/sh www-data -c "wp core install --url=${DOMAIN_CURRENT_SITE} --title='${WORDPRESS_TITLE}' --admin_user=${WORDPRESS_ADMIN_USER} --admin_password=${WORDPRESS_ADMIN_PASSWORD} --admin_email=${WORDPRESS_ADMIN_EMAIL} --skip-email"
          
          echo "‚úÖ WordPress installed successfully"
        else
          echo "‚úÖ WordPress already installed, skipping installation"
        fi
        
        # 3. CHECK IF MULTISITE IS ENABLED
        if ! su -s /bin/sh www-data -c "wp site list" 2>/dev/null; then
          echo "üåê Setting up multisite..."
          
          # Create .htaccess for multisite
          su -s /bin/sh www-data -c "wp rewrite structure '/%postname%/'"
          
          # Enable multisite
          su -s /bin/sh www-data -c "wp core multisite-convert --title='${WORDPRESS_TITLE}' --subdomains=${SUBDOMAIN_INSTALL}"
          
          echo "‚úÖ Multisite enabled successfully"
        else
          echo "‚úÖ Multisite already enabled"
        fi
        
        # 4. CREATE MUST-USE PLUGIN FOR UPLOAD LIMITS
        echo "üîß Creating upload limits override plugin..."
        mkdir -p /var/www/html/wp-content/mu-plugins || echo "‚ö†Ô∏è MU plugins dir creation failed, continuing..."
        echo '<?php' > /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo "‚ö†Ô∏è MU plugin creation failed, continuing..."
        echo '// Force Upload Limits - Must Use Plugin' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo "‚ö†Ô∏è MU plugin creation failed, continuing..."
        echo 'add_filter("upload_size_limit", function() { return 67108864; }, 999);' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo "‚ö†Ô∏è MU plugin creation failed, continuing..."
        echo 'add_filter("wp_max_upload_size", function() { return 67108864; }, 999);' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo "‚ö†Ô∏è MU plugin creation failed, continuing..."
        echo 'add_action("init", function() {' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo "‚ö†Ô∏è MU plugin creation failed, continuing..."
        echo '    @ini_set("upload_max_filesize", "64M");' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo "‚ö†Ô∏è MU plugin creation failed, continuing..."
        echo '    @ini_set("post_max_size", "64M");' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo "‚ö†Ô∏è MU plugin creation failed, continuing..."
        echo '});' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo "‚ö†Ô∏è MU plugin creation failed, continuing..."
        chown www-data:www-data /var/www/html/wp-content/mu-plugins/force-upload-limits.php 2>/dev/null || echo "‚ö†Ô∏è MU plugin ownership failed, continuing..."
        echo "‚úÖ Upload limits plugin created"
        
        # 5. INSTALL PLUGINS
        echo "üì¶ Installing plugins..."
        
        # Essential plugins
        if [ "${INSTALL_WORDFENCE}" = "true" ]; then
          su -s /bin/sh www-data -c "wp plugin install wordfence --activate --network" || echo "‚ö†Ô∏è Wordfence installation failed, continuing..."
        fi
        
        if [ "${INSTALL_YOAST_SEO}" = "true" ]; then
          su -s /bin/sh www-data -c "wp plugin install wordpress-seo --activate --network" || echo "‚ö†Ô∏è Yoast SEO installation failed, continuing..."
        fi
        
        if [ "${INSTALL_CONTACT_FORM_7}" = "true" ]; then
          su -s /bin/sh www-data -c "wp plugin install contact-form-7 --activate --network" || echo "‚ö†Ô∏è Contact Form 7 installation failed, continuing..."
        fi
        
        if [ "${INSTALL_WOOCOMMERCE}" = "true" ]; then
          su -s /bin/sh www-data -c "wp plugin install woocommerce --activate --network" || echo "‚ö†Ô∏è WooCommerce installation failed, continuing..."
        fi
        
        if [ "${INSTALL_ELEMENTOR}" = "true" ]; then
          su -s /bin/sh www-data -c "wp plugin install elementor --activate --network" || echo "‚ö†Ô∏è Elementor installation failed, continuing..."
        fi
        
        if [ "${INSTALL_GOOGLE_SITE_KIT}" = "true" ]; then
          su -s /bin/sh www-data -c "wp plugin install google-site-kit --activate --network" || echo "‚ö†Ô∏è Google Site Kit installation failed, continuing..."
        fi
        
        if [ "${INSTALL_UPDRAFTPLUS}" = "true" ]; then
          su -s /bin/sh www-data -c "wp plugin install updraftplus --activate --network" || echo "‚ö†Ô∏è UpdraftPlus installation failed, continuing..."
        fi
        
        if [ "${INSTALL_NS_CLONER}" = "true" ]; then
          su -s /bin/sh www-data -c "wp plugin install ns-cloner-site-copier --activate --network" || echo "‚ö†Ô∏è NS Cloner installation failed, continuing..."
        fi
        
        # Always install WP Super Cache (replaces WP Rocket)
        su -s /bin/sh www-data -c "wp plugin install wp-super-cache --activate --network" || echo "‚ö†Ô∏è WP Super Cache installation failed, continuing..."
        
        echo "‚úÖ Plugin installation completed"
        
        # 6. INSTALL THEMES
        echo "üé® Installing themes..."
        
        # Install Hello Elementor theme
        su -s /bin/sh www-data -c "wp theme install hello-elementor --activate --network" || echo "‚ö†Ô∏è Hello Elementor theme installation failed, continuing..."
        
        # Install Twenty Twenty-Four as fallback
        su -s /bin/sh www-data -c "wp theme install twentytwentyfour --network" || echo "‚ö†Ô∏è Twenty Twenty-Four theme installation failed, continuing..."
        
        echo "‚úÖ Theme installation completed"
        
        # 7. FINAL CONFIGURATION
        echo "‚öôÔ∏è Applying final configuration..."
        
        # Update permalink structure
        su -s /bin/sh www-data -c "wp rewrite structure '/%postname%/' --hard" || echo "‚ö†Ô∏è Permalink update failed, continuing..."
        
        # Flush rewrite rules
        su -s /bin/sh www-data -c "wp rewrite flush --hard" || echo "‚ö†Ô∏è Rewrite flush failed, continuing..."
        
        # Clear any caches
        su -s /bin/sh www-data -c "wp cache flush" 2>/dev/null || echo "‚ö†Ô∏è Cache flush failed, continuing..."
        
        echo "‚úÖ Final configuration completed"
        
        # 8. VERIFICATION
        echo "üîç Verifying installation..."
        
        # Check WordPress status
        su -s /bin/sh www-data -c "wp core version" || echo "‚ö†Ô∏è WordPress version check failed"
        su -s /bin/sh www-data -c "wp core is-installed" && echo "‚úÖ WordPress installation verified"
        
        # Check multisite status
        su -s /bin/sh www-data -c "wp site list" && echo "‚úÖ Multisite configuration verified"
        
        # Check upload directory
        ls -la /var/www/html/wp-content/uploads/ && echo "‚úÖ Upload directory structure verified"
        
        # Check MU plugin
        ls -la /var/www/html/wp-content/mu-plugins/ && echo "‚úÖ Must-Use plugins verified"
        
        echo "üéâ WordPress Multisite initialization completed successfully!"
        echo "üåê Access your site at: http://${DOMAIN_CURRENT_SITE}"
        echo "üë§ Admin login: ${WORDPRESS_ADMIN_USER} / ${WORDPRESS_ADMIN_PASSWORD}"
        echo "üìß Admin email: ${WORDPRESS_ADMIN_EMAIL}"

volumes:
  db_data:
  redis_data:
  wordpress_data:

networks:
  wordpress_network:
    driver: bridge 