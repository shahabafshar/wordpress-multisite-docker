version: '3.8'

services:
  # ── UPLOAD PERMISSIONS FIX ──
  permfix-uploads:
    image: alpine:3.20
    user: "0:0"
    restart: "no"
    command:
      - sh
      - -c
      - |
        echo "🔧 Starting upload permissions fix..."
        

        # Create a custom PHP configuration that will be mounted
        mkdir -p /mnt/php-uploads-config || echo "PHP uploads config dir creation failed, continuing..."
        echo "; WordPress Upload Override" > /mnt/php-uploads-config/uploads.ini || echo "PHP uploads ini creation failed, continuing..."
        echo "upload_max_filesize = 64M" >> /mnt/php-uploads-config/uploads.ini || echo "PHP uploads ini failed, continuing..."
        echo "post_max_size = 64M" >> /mnt/php-uploads-config/uploads.ini || echo "PHP uploads ini failed, continuing..."
        echo "memory_limit = 256M" >> /mnt/php-uploads-config/uploads.ini || echo "PHP uploads ini failed, continuing..."
        echo "max_execution_time = 300" >> /mnt/php-uploads-config/uploads.ini || echo "PHP uploads ini failed, continuing..."
        echo "max_input_vars = 3000" >> /mnt/php-uploads-config/uploads.ini || echo "PHP uploads ini failed, continuing..."
        echo "file_uploads = On" >> /mnt/php-uploads-config/uploads.ini || echo "PHP uploads ini failed, continuing..."
        
        # Also create .htaccess backup
        echo "# Upload size configuration via .htaccess" > /mnt/wp-content/.htaccess-upload || echo "htaccess upload config failed, continuing..."
        echo "php_value upload_max_filesize 64M" >> /mnt/wp-content/.htaccess-upload || echo "htaccess upload config failed, continuing..."
        echo "php_value post_max_size 64M" >> /mnt/wp-content/.htaccess-upload || echo "htaccess upload config failed, continuing..."
        echo "php_value memory_limit 256M" >> /mnt/wp-content/.htaccess-upload || echo "htaccess upload config failed, continuing..."
        
        # Set ownership and permissions with specific focus on problematic directories
        chown -R 33:33 /mnt/wp-content || echo "Ownership change failed, continuing..."
        chmod -R 755 /mnt/wp-content/uploads || echo "Permission change failed, continuing..."
 
        # Specifically fix unlimited_elements_cache permissions (needs write access for plugin)
        chmod 777 /mnt/wp-content/uploads/unlimited_elements_cache || echo "Unlimited elements cache chmod failed, continuing..."
        chown -R 33:33 /mnt/wp-content/uploads/unlimited_elements_cache || echo "Unlimited elements cache chown failed, continuing..."
        
        # Ensure parent directory is also writable for file creation
        chmod 755 /mnt/wp-content/uploads || echo "Main uploads chmod failed, continuing..."
        chown 33:33 /mnt/wp-content/uploads || echo "Main uploads chown failed, continuing..."
               
        # Create security .htaccess
        echo "Options -Indexes" > /mnt/wp-content/uploads/.htaccess || echo "htaccess creation failed, continuing..."
        echo "Order deny,allow" >> /mnt/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "Deny from all" >> /mnt/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        # Allow web assets: images, documents, CSS, JS, fonts, icons
        echo '<FilesMatch "\.(jpg|jpeg|png|gif|webp|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|zip|rar|css|js|woff|woff2|ttf|eot|svg|ico)$">' >> /mnt/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "    Allow from all" >> /mnt/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "</FilesMatch>" >> /mnt/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo '<FilesMatch "\.(php|php3|php4|php5|phtml|pl|py|jsp|asp|sh|cgi)$">' >> /mnt/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "    Deny from all" >> /mnt/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "</FilesMatch>" >> /mnt/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        chown 33:33 /mnt/wp-content/uploads/.htaccess || echo "htaccess ownership failed, continuing..."
        
        echo "✅ Upload permissions fixed successfully"
    volumes:
      - ./wp-content:/mnt/wp-content
      - ./php-uploads-config:/mnt/php-uploads-config
    networks:
      - wordpress_network

  # ── DATABASE ──
  db:
    image: mariadb:${MARIADB_VERSION:-11.5}
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${WORDPRESS_DB_NAME}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - wordpress_network

  # ── REDIS ──
  redis:
    image: redis:${REDIS_VERSION:-alpine}
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - wordpress_network

  # ── WORDPRESS ──
  wordpress:
    image: wordpress:latest
    restart: unless-stopped
    user: "33:33"
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      permfix-uploads:
        condition: service_completed_successfully
    ports:
      - "${WORDPRESS_LOCAL_PORT:-8080}:80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # PHP upload configuration via environment variables (official WordPress image)
      WORDPRESS_UPLOAD_LIMIT: ${UPLOAD_MAX_FILESIZE:-64M}
      WORDPRESS_MEMORY_LIMIT: ${MEMORY_LIMIT:-256M}
      # Try PHP environment variables
      PHP_UPLOAD_MAX_FILESIZE: ${UPLOAD_MAX_FILESIZE:-64M}
      PHP_POST_MAX_SIZE: ${POST_MAX_SIZE:-64M}
      PHP_MEMORY_LIMIT: ${MEMORY_LIMIT:-256M}
      WORDPRESS_CONFIG_EXTRA: |
        if (!defined('WP_REDIS_HOST')) define('WP_REDIS_HOST', 'redis');
        if (!defined('WP_REDIS_PORT')) define('WP_REDIS_PORT', 6379);
        if (!defined('WP_REDIS_DATABASE')) define('WP_REDIS_DATABASE', 0);
        if (!defined('WP_REDIS_PASSWORD')) define('WP_REDIS_PASSWORD', '');
        if (!defined('WP_CACHE')) define('WP_CACHE', true);
        
        # Increase upload limits for high-resolution images
        define('WP_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        define('WP_MAX_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        
        # Force PHP upload settings - using override approach
        @ini_set('upload_max_filesize', '${UPLOAD_MAX_FILESIZE:-64M}');
        @ini_set('post_max_size', '${POST_MAX_SIZE:-64M}');
        @ini_set('memory_limit', '${MEMORY_LIMIT:-256M}');
        @ini_set('max_execution_time', '${MAX_EXECUTION_TIME:-300}');
        @ini_set('max_input_vars', '${MAX_INPUT_VARS:-3000}');
        

        
        # WordPress constants for upload handling
        if (!defined('WP_MEMORY_LIMIT')) define('WP_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        if (!defined('WP_MAX_MEMORY_LIMIT')) define('WP_MAX_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        
        if (!defined('WP_DEBUG')) define('WP_DEBUG', false);
        if (!defined('WP_DEBUG_LOG')) define('WP_DEBUG_LOG', false);
    volumes:
      - wordpress_data:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./plugins:/var/www/html/wp-content/plugins
      - ./themes:/var/www/html/wp-content/themes
    networks:
      - wordpress_network

  # ── WP-CLI INIT ──
  wp-cli-init:
    image: wordpress:cli
    restart: "no"
    user: "33:33"
    depends_on:
      db:
        condition: service_started
      wordpress:
        condition: service_started
      permfix-uploads:
        condition: service_completed_successfully
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      WORDPRESS_TITLE: ${WORDPRESS_TITLE:-WordPress Multisite}
      WORDPRESS_ADMIN_USER: ${WORDPRESS_ADMIN_USER:-admin}
      WORDPRESS_ADMIN_PASSWORD: ${WORDPRESS_ADMIN_PASSWORD:-admin123}
      WORDPRESS_ADMIN_EMAIL: ${WORDPRESS_ADMIN_EMAIL:-admin@example.com}
      DOMAIN_CURRENT_SITE: ${DOMAIN_CURRENT_SITE:-localhost:8080}
      SUBDOMAIN_INSTALL: ${SUBDOMAIN_INSTALL:-false}
      INSTALL_WORDFENCE: ${INSTALL_WORDFENCE:-true}
      INSTALL_YOAST_SEO: ${INSTALL_YOAST_SEO:-true}
      INSTALL_CONTACT_FORM_7: ${INSTALL_CONTACT_FORM_7:-true}
      INSTALL_WOOCOMMERCE: ${INSTALL_WOOCOMMERCE:-true}
      INSTALL_ELEMENTOR: ${INSTALL_ELEMENTOR:-true}
      INSTALL_GOOGLE_SITE_KIT: ${INSTALL_GOOGLE_SITE_KIT:-true}
      INSTALL_UPDRAFTPLUS: ${INSTALL_UPDRAFTPLUS:-true}
      INSTALL_NS_CLONER: ${INSTALL_NS_CLONER:-true}
      HOME: /tmp
    working_dir: /var/www/html
    volumes:
      - wordpress_data:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./plugins:/var/www/html/wp-content/plugins
      - ./themes:/var/www/html/wp-content/themes
    command:
      - bash
      - -c
      - |
        set -e
        cd /var/www/html || exit 1
        echo '⏳ Waiting for database and WordPress to be ready...'
        sleep 15
        

        
        echo '🔍 Checking if WordPress is already installed...'
        if wp core is-installed 2>/dev/null; then
          echo '✅ WordPress is already installed!'
          echo '🔧 Checking if multisite is enabled...'
          if wp core is-installed --network 2>/dev/null; then
            echo '✅ Multisite is already enabled!'
          else
            echo '🚀 Enabling multisite for existing WordPress...'
            wp core multisite-install --title="${WORDPRESS_TITLE}" --admin_email="${WORDPRESS_ADMIN_EMAIL}"
            echo '🔧 Adding multisite constants to wp-config.php...'
            wp config set WP_ALLOW_MULTISITE true --raw
            wp config set MULTISITE true --raw
            wp config set SUBDOMAIN_INSTALL "${SUBDOMAIN_INSTALL:-false}" --raw
            wp config set DOMAIN_CURRENT_SITE "${DOMAIN_CURRENT_SITE}"
            wp config set PATH_CURRENT_SITE '/'
            wp config set SITE_ID_CURRENT_SITE 1 --raw
            wp config set BLOG_ID_CURRENT_SITE 1 --raw
            echo '📄 Creating .htaccess for multisite...'
            if [ "${SUBDOMAIN_INSTALL:-false}" = "false" ]; then
              echo 'RewriteEngine On' > /var/www/html/.htaccess || echo '⚠️  .htaccess creation failed, continuing...'
              echo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 1 failed, continuing...'
              echo 'RewriteBase /' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 2 failed, continuing...'
              echo 'RewriteRule ^index\.php$ - [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 3 failed, continuing...'
              echo '' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 4 failed, continuing...'
              echo '# add a trailing slash to /wp-admin' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 5 failed, continuing...'
              echo 'RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 6 failed, continuing...'
              echo '' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 7 failed, continuing...'
              echo 'RewriteCond %{REQUEST_FILENAME} -f [OR]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 8 failed, continuing...'
              echo 'RewriteCond %{REQUEST_FILENAME} -d' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 9 failed, continuing...'
              echo 'RewriteRule ^ - [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 10 failed, continuing...'
              echo 'RewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 11 failed, continuing...'
              echo 'RewriteRule ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 12 failed, continuing...'
              echo 'RewriteRule . index.php [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 13 failed, continuing...'
            fi

          fi
        else
                      echo '📝 Installing WordPress...'
            wp core install --url="https://${DOMAIN_CURRENT_SITE}" --title="${WORDPRESS_TITLE}" --admin_user="${WORDPRESS_ADMIN_USER}" --admin_password="${WORDPRESS_ADMIN_PASSWORD}" --admin_email="${WORDPRESS_ADMIN_EMAIL}" --skip-email
            echo '🔧 Configuring WordPress...'
            wp option update home "https://${DOMAIN_CURRENT_SITE}"
            wp option update siteurl "https://${DOMAIN_CURRENT_SITE}"
            wp rewrite structure '/%postname%/'
            wp rewrite flush
            echo '✅ WordPress installed and configured successfully!'
            echo '🚀 Enabling multisite...'
            wp core multisite-install --title="${WORDPRESS_TITLE}" --admin_email="${WORDPRESS_ADMIN_EMAIL}"
            echo '🔧 Adding multisite constants to wp-config.php...'
            wp config set WP_ALLOW_MULTISITE true --raw
            wp config set MULTISITE true --raw
            wp config set SUBDOMAIN_INSTALL "${SUBDOMAIN_INSTALL:-false}" --raw
            wp config set DOMAIN_CURRENT_SITE "${DOMAIN_CURRENT_SITE}"
            wp config set PATH_CURRENT_SITE '/'
            wp config set SITE_ID_CURRENT_SITE 1 --raw
            wp config set BLOG_ID_CURRENT_SITE 1 --raw
          echo '📄 Creating .htaccess for multisite...'
          if [ "${SUBDOMAIN_INSTALL:-false}" = "false" ]; then
            echo 'RewriteEngine On' > /var/www/html/.htaccess || echo '⚠️  .htaccess creation failed, continuing...'
            echo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 1 failed, continuing...'
            echo 'RewriteBase /' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 2 failed, continuing...'
            echo 'RewriteRule ^index\.php$ - [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 3 failed, continuing...'
            echo '' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 4 failed, continuing...'
            echo '# add a trailing slash to /wp-admin' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 5 failed, continuing...'
            echo 'RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 6 failed, continuing...'
            echo '' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 7 failed, continuing...'
            echo 'RewriteCond %{REQUEST_FILENAME} -f [OR]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 8 failed, continuing...'
            echo 'RewriteCond %{REQUEST_FILENAME} -d' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 9 failed, continuing...'
            echo 'RewriteRule ^ - [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 10 failed, continuing...'
            echo 'RewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 11 failed, continuing...'
            echo 'RewriteRule ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 12 failed, continuing...'
            echo 'RewriteRule . index.php [L]' >> /var/www/html/.htaccess || echo '⚠️  .htaccess rule 13 failed, continuing...'
          fi
          
          echo '✅ WordPress Multisite setup completed!'
        fi
        
        echo '🔌 Installing essential plugins...'
        
        # Install Wordfence Security
        if [ "${INSTALL_WORDFENCE}" = "true" ]; then
          echo '🛡️  Installing Wordfence Security...'
          wp plugin install wordfence --activate --allow-root || echo '⚠️  Wordfence installation failed, continuing...'
        fi
        
        # Install Yoast SEO
        if [ "${INSTALL_YOAST_SEO}" = "true" ]; then
          echo '🔍 Installing Yoast SEO...'
          wp plugin install wordpress-seo --activate --allow-root || echo '⚠️  Yoast SEO installation failed, continuing...'
        fi
        
        # Install Contact Form 7
        if [ "${INSTALL_CONTACT_FORM_7}" = "true" ]; then
          echo '📝 Installing Contact Form 7...'
          wp plugin install contact-form-7 --activate --allow-root || echo '⚠️  Contact Form 7 installation failed, continuing...'
        fi
        
        # Install WooCommerce
        if [ "${INSTALL_WOOCOMMERCE}" = "true" ]; then
          echo '🛒 Installing WooCommerce...'
          wp plugin install woocommerce --activate --allow-root || echo '⚠️  WooCommerce installation failed, continuing...'
        fi
        
        # Install Elementor
        if [ "${INSTALL_ELEMENTOR}" = "true" ]; then
          echo '🎨 Installing Elementor...'
          wp plugin install elementor --activate --allow-root || echo '⚠️  Elementor installation failed, continuing...'
        fi
        
        # Install Google Site Kit
        if [ "${INSTALL_GOOGLE_SITE_KIT}" = "true" ]; then
          echo '📊 Installing Google Site Kit...'
          wp plugin install google-site-kit --activate --allow-root || echo '⚠️  Google Site Kit installation failed, continuing...'
        fi
        
        # Install UpdraftPlus
        if [ "${INSTALL_UPDRAFTPLUS}" = "true" ]; then
          echo '💾 Installing UpdraftPlus...'
          wp plugin install updraftplus --activate --allow-root || echo '⚠️  UpdraftPlus installation failed, continuing...'
        fi
        
        # Install NS Cloner
        if [ "${INSTALL_NS_CLONER}" = "true" ]; then
          echo '🔄 Installing NS Cloner...'
          wp plugin install ns-cloner-site-copier --activate --allow-root || echo '⚠️  NS Cloner installation failed, continuing...'
        fi
        
        # Always install WP Super Cache (replaces WP Rocket)
        echo '⚡ Installing WP Super Cache...'
        wp plugin install wp-super-cache --activate --allow-root || echo '⚠️  WP Super Cache installation failed, continuing...'
        
        echo '✅ Plugin installation completed!'
        
        # Verify mu-plugins are loaded
        echo '🔌 Verifying mu-plugins...'
        if [ -d "/var/www/html/wp-content/mu-plugins" ]; then
          echo "📁 mu-plugins directory exists"
          ls -la /var/www/html/wp-content/mu-plugins/ || echo "⚠️  Could not list mu-plugins directory"
          
          # Check if suppress-signup-emails plugin exists
          if [ -f "/var/www/html/wp-content/mu-plugins/suppress-signup-emails.php" ]; then
            echo "✅ suppress-signup-emails.php mu-plugin found"
            # Verify the plugin is syntactically correct
            php -l /var/www/html/wp-content/mu-plugins/suppress-signup-emails.php || echo "⚠️  PHP syntax check failed for suppress-signup-emails.php"
          else
            echo "⚠️  suppress-signup-emails.php mu-plugin not found"
          fi
        else
          echo "⚠️  mu-plugins directory not found"
        fi
        
        # Show installation summary
        echo '📊 Plugin Installation Summary:'
        wp plugin list --status=active --allow-root || echo '⚠️  Could not list active plugins, continuing...'
        
        # Show mu-plugins status
        echo '📊 Must-Use Plugins Summary:'
        wp plugin list --status=mustuse --allow-root || echo '⚠️  Could not list must-use plugins, continuing...'
        
        echo '🎨 Installing themes...'
        
        # Install Hello Elementor theme
        echo '🏠 Installing Hello Elementor theme...'
        wp theme install hello-elementor --activate --allow-root || echo '⚠️  Hello Elementor theme installation failed, continuing...'
        
        echo '✅ Theme installation completed!'
        
        echo '🔧 Diagnosing PHP upload configuration...'
        
        # Check current PHP settings
        echo "=== PHP Configuration Diagnosis ==="
        php -i | grep -E 'upload_max_filesize|post_max_size|memory_limit|max_execution_time|max_input_vars' || echo '⚠️  PHP info failed, continuing...'
        
        echo "=== Loaded PHP INI Files ==="
        php --ini || echo '⚠️  PHP ini check failed, continuing...'
        
        echo "=== WordPress Upload Settings ==="
        wp eval 'echo "WordPress max upload: " . wp_max_upload_size() / 1024 / 1024 . "MB\n";' || echo '⚠️  WordPress upload check failed, continuing...'
        
        echo "=== Applying PHP Upload Configuration to .htaccess ==="
        # Check if upload config already added to prevent duplicates
        if ! grep -q "Upload size configuration via .htaccess" /var/www/html/.htaccess 2>/dev/null; then
          if [ -f /var/www/html/wp-content/.htaccess-upload ]; then
            echo "" >> /var/www/html/.htaccess || echo "htaccess append failed, continuing..."
            cat /var/www/html/wp-content/.htaccess-upload >> /var/www/html/.htaccess || echo "htaccess upload config append failed, continuing..."

            echo "Upload config added to .htaccess"
          else
            echo "No upload config file found"
          fi
        else
          echo "Upload config already exists in .htaccess"
        fi
        
        echo "=== File System Check ==="
        echo ".htaccess contents:" && tail -20 /var/www/html/.htaccess 2>/dev/null || echo "Cannot read .htaccess"
        echo ""
        echo "Upload config file:" && cat /var/www/html/wp-content/.htaccess-upload 2>/dev/null || echo "Upload config not found"
        echo ""
        echo "Testing PHP settings after .htaccess:"
        
        echo "=== WordPress Upload Configuration ==="
        echo "Testing if PHP configuration and .htaccess are sufficient for 64MB uploads"
        
        echo "=== Force Restart PHP-FPM ==="
        # Try to restart PHP-FPM to pick up any configuration changes
        echo "Skipping PHP-FPM restart (requires different approach)"
        
        echo "=== Final WordPress Upload Test ==="
        sleep 3  # Wait for potential restart
        wp eval 'echo "Final WordPress max upload: " . size_format(wp_max_upload_size()) . "\n";' || echo '⚠️  Final WordPress upload check failed, continuing...'
        
        echo "=== Mu-Plugin Functionality Test ==="
        # Test if the suppress-signup-emails filter is working
        wp eval 'if (has_filter("wpmu_signup_user_notification", "__return_false")) { echo "✅ suppress-signup-emails filter is active\n"; } else { echo "⚠️  suppress-signup-emails filter not found\n"; }' || echo '⚠️  Mu-plugin filter test failed, continuing...'
        
        echo "=== Debug File System ==="
        echo "PHP uploads config exists?" && ls -la /usr/local/etc/php/conf.d/uploads.ini 2>/dev/null || echo "PHP uploads.ini NOT FOUND in container"
        echo "WordPress volumes:" && ls -la /var/www/html/php-uploads-config/ 2>/dev/null || echo "No php-uploads-config in wordpress volume"

        
        echo '✅ WordPress configuration completed successfully!'
        echo '🎉 WordPress Multisite with all plugins and themes is ready!'
        echo '📋 Installation Summary:'
        echo '   ✅ WordPress Core installed and configured'
        echo '   ✅ Multisite enabled and configured'
        echo '   ✅ Essential plugins installed and activated'
        echo '   ✅ Must-use plugins (mu-plugins) loaded'
        echo '   ✅ Signup email suppression enabled'
        echo '   ✅ Hello Elementor theme installed and activated'
        echo '   ✅ Upload configuration applied (64MB limit)'
        echo '   ✅ Security .htaccess rules configured'
        echo ''
        echo '🔍 Test your setup:'
        echo '   🌐 Main site: https://your-domain.com'
        echo '   🔧 Admin: https://your-domain.com/wp-admin'
        echo '   📁 Network admin: https://your-domain.com/wp-admin/network/'
        echo '   📤 Try uploading a file larger than 2MB to test 64MB limit'
    networks:
      - wordpress_network

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  wordpress_data:
    driver: local

networks:
  wordpress_network:
    driver: bridge 