version: '3.8'

services:
  # ‚îÄ‚îÄ WORDPRESS INITIALIZATION ‚îÄ‚îÄ
  wp-init:
    image: wordpress:cli
    restart: "no"
    user: "0:0"
    depends_on:
      db:
        condition: service_healthy
      wordpress:
        condition: service_healthy
    restart: "on-failure:3"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_ADMIN_USER: ${WORDPRESS_ADMIN_USER:-admin}
      WORDPRESS_ADMIN_PASSWORD: ${WORDPRESS_ADMIN_PASSWORD:-admin123}
      WORDPRESS_ADMIN_EMAIL: ${WORDPRESS_ADMIN_EMAIL:-admin@example.com}
      WORDPRESS_TITLE: ${WORDPRESS_TITLE:-WordPress Multisite}
      DOMAIN_CURRENT_SITE: ${DOMAIN_CURRENT_SITE:-localhost:${EXTERNAL_PORT:-8080}}
      SUBDOMAIN_INSTALL: ${SUBDOMAIN_INSTALL:-false}
      INSTALL_WORDFENCE: ${INSTALL_WORDFENCE:-true}
      INSTALL_YOAST_SEO: ${INSTALL_YOAST_SEO:-true}
      INSTALL_CONTACT_FORM_7: ${INSTALL_CONTACT_FORM_7:-true}
      INSTALL_WOOCOMMERCE: ${INSTALL_WOOCOMMERCE:-true}
      INSTALL_ELEMENTOR: ${INSTALL_ELEMENTOR:-true}
      INSTALL_GOOGLE_SITE_KIT: ${INSTALL_GOOGLE_SITE_KIT:-true}
      INSTALL_UPDRAFTPLUS: ${INSTALL_UPDRAFTPLUS:-true}
      INSTALL_NS_CLONER: ${INSTALL_NS_CLONER:-true}
      HOME: /tmp
    working_dir: /var/www/html
    volumes:
      - wordpress_data:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./plugins:/var/www/html/wp-content/plugins
      - ./themes:/var/www/html/wp-content/themes
    command:
      - bash
      - -c
      - |
        set -e
        
        echo "üöÄ Starting WordPress initialization..."
        
        # Wait for database to be ready with retry logic
        echo "‚è≥ Waiting for database to be ready..."
        for i in {1..60}; do
          if su -s /bin/sh www-data -c "wp db check --allow-root" 2>/dev/null; then
            echo "‚úÖ Database connection established"
            break
          fi
          echo "‚è≥ Database not ready, attempt $i/60..."
          sleep 10
        done
        
        # Final check - if database still not ready, try a few more times
        if ! su -s /bin/sh www-data -c "wp db check --allow-root" 2>/dev/null; then
          echo "‚ö†Ô∏è Database connection still not ready, trying a few more times..."
          for i in {1..10}; do
            sleep 15
            if su -s /bin/sh www-data -c "wp db check --allow-root" 2>/dev/null; then
              echo "‚úÖ Database connection established on final attempt"
              break
            fi
            echo "‚è≥ Final attempt $i/10..."
          done
        fi
        
        # If still not ready, continue anyway (might be a timing issue)
        if ! su -s /bin/sh www-data -c "wp db check --allow-root" 2>/dev/null; then
          echo "‚ö†Ô∏è Database connection not confirmed, but continuing anyway..."
        fi
        
        # Wait for WordPress to be ready
        echo "‚è≥ Waiting for WordPress to be ready..."
        sleep 10
        
        # Debug: Check what's running
        echo "üîç Debug: Checking running processes..."
        ps aux | head -10 || echo "ps command failed"
        echo "üîç Debug: Checking network connections..."
        netstat -tlnp | head -10 || echo "netstat command failed"
        echo "üîç Debug: Checking WordPress files..."
        ls -la /var/www/html/ | head -10 || echo "ls command failed"
        
        # Step 1: Fix upload directory permissions (consolidated from permfix-uploads)
        echo "üîß Setting up upload directory permissions..."
        
        # Create the full directory structure step by step
        mkdir -p /var/www/html/wp-content/uploads || echo "uploads dir creation failed, continuing..."
        mkdir -p /var/www/html/wp-content/uploads/sites || echo "sites dir creation failed, continuing..."
        
        # Create year/month structure for current and next year
        current_year=$(date +%Y)
        next_year=$((current_year + 1))
        for year in $current_year $next_year; do
          for month in $(seq -w 1 12); do
            mkdir -p "/var/www/html/wp-content/uploads/$year/$month" || echo "Year/month dir creation failed, continuing..."
          done
        done
        
        # Create common plugin directories
        mkdir -p /var/www/html/wp-content/uploads/elementor || echo "Elementor dir creation failed, continuing..."
        mkdir -p /var/www/html/wp-content/uploads/unlimited_elements || echo "Unlimited Elements dir creation failed, continuing..."
        mkdir -p /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "Unlimited Elements cache dir creation failed, continuing..."
        
        # Set ownership and permissions
        chown -R 33:33 /var/www/html/wp-content || echo "Ownership change failed, continuing..."
        chmod -R 755 /var/www/html/wp-content/uploads || echo "Permission change failed, continuing..."
        
        # Specifically fix unlimited_elements_cache permissions (needs write access for plugin)
        chmod 775 /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "Unlimited elements cache chmod failed, continuing..."
        chown -R 33:33 /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "Unlimited elements cache chown failed, continuing..."
        
        # Create security .htaccess
        echo "Options -Indexes" > /var/www/html/wp-content/uploads/.htaccess || echo "htaccess creation failed, continuing..."
        echo "Order deny,allow" >> /var/www/html/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "Deny from all" >> /var/www/html/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo '<FilesMatch "\.(jpg|jpeg|png|gif|webp|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|zip|rar)$">' >> /var/www/html/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "    Allow from all" >> /var/www/html/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "</FilesMatch>" >> /var/www/html/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo '<FilesMatch "\.(php|php3|php4|php5|phtml|pl|py|jsp|asp|sh|cgi)$">' >> /var/www/html/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "    Deny from all" >> /var/www/html/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        echo "</FilesMatch>" >> /var/www/html/wp-content/uploads/.htaccess || echo "htaccess line failed, continuing..."
        chown 33:33 /var/www/html/wp-content/uploads/.htaccess || echo "htaccess ownership failed, continuing..."
        
        echo "‚úÖ Upload permissions fixed successfully"
        
        # Step 2: Check if WordPress is already installed
        echo "üîç Checking WordPress installation status..."
        if ! su -s /bin/sh www-data -c "wp core is-installed --allow-root" 2>/dev/null; then
          echo "üì¶ WordPress not installed, installing now..."
          
          # Install WordPress
          su -s /bin/sh www-data -c "wp core install --url=\${DOMAIN_CURRENT_SITE} --title=\${WORDPRESS_TITLE} --admin_user=\${WORDPRESS_ADMIN_USER} --admin_password=\${WORDPRESS_ADMIN_PASSWORD} --admin_email=\${WORDPRESS_ADMIN_EMAIL} --skip-email --allow-root" || echo "‚ö†Ô∏è WordPress installation failed, continuing..."
          
          # Enable multisite
          echo "üåê Enabling multisite..."
          su -s /bin/sh www-data -c "wp core multisite-convert --title=\${WORDPRESS_TITLE} --allow-root" || echo "‚ö†Ô∏è Multisite conversion failed, continuing..."
          
          # Create .htaccess for multisite
          echo "üìù Creating .htaccess for multisite..."
          su -s /bin/sh www-data -c "wp rewrite flush --hard --allow-root" || echo "‚ö†Ô∏è .htaccess creation failed, continuing..."
          
          echo "‚úÖ WordPress multisite installed successfully"
        else
          echo "‚úÖ WordPress already installed, skipping installation"
        fi
        
        # Step 3: Install and activate plugins
        echo "üîå Installing plugins..."
        
        # Wordfence Security
        if [ "\${INSTALL_WORDFENCE:-true}" = "true" ]; then
          echo "üõ°Ô∏è Installing Wordfence Security..."
          su -s /bin/sh www-data -c "wp plugin install wordfence --activate --allow-root" || echo "‚ö†Ô∏è Wordfence installation failed, continuing..."
        fi
        
        # Yoast SEO
        if [ "\${INSTALL_YOAST_SEO:-true}" = "true" ]; then
          echo "üîç Installing Yoast SEO..."
          su -s /bin/sh www-data -c "wp plugin install wordpress-seo --activate --allow-root" || echo "‚ö†Ô∏è Yoast SEO installation failed, continuing..."
        fi
        
        # Contact Form 7
        if [ "\${INSTALL_CONTACT_FORM_7:-true}" = "true" ]; then
          echo "üìù Installing Contact Form 7..."
          su -s /bin/sh www-data -c "wp plugin install contact-form-7 --activate --allow-root" || echo "‚ö†Ô∏è Contact Form 7 installation failed, continuing..."
        fi
        
        # WooCommerce
        if [ "\${INSTALL_WOOCOMMERCE:-true}" = "true" ]; then
          echo "üõí Installing WooCommerce..."
          su -s /bin/sh www-data -c "wp plugin install woocommerce --activate --allow-root" || echo "‚ö†Ô∏è WooCommerce installation failed, continuing..."
        fi
        
        # Elementor
        if [ "\${INSTALL_ELEMENTOR:-true}" = "true" ]; then
          echo "üé® Installing Elementor..."
          su -s /bin/sh www-data -c "wp plugin install elementor --activate --allow-root" || echo "‚ö†Ô∏è Elementor installation failed, continuing..."
        fi
        
        # Google Site Kit
        if [ "\${INSTALL_GOOGLE_SITE_KIT:-true}" = "true" ]; then
          echo "üìä Installing Google Site Kit..."
          su -s /bin/sh www-data -c "wp plugin install google-site-kit --activate --allow-root" || echo "‚ö†Ô∏è Google Site Kit installation failed, continuing..."
        fi
        
        # UpdraftPlus
        if [ "\${INSTALL_UPDRAFTPLUS:-true}" = "true" ]; then
          echo "üíæ Installing UpdraftPlus..."
          su -s /bin/sh www-data -c "wp plugin install updraftplus --activate --allow-root" || echo "‚ö†Ô∏è UpdraftPlus installation failed, continuing..."
        fi
        
        # NS Cloner
        if [ "\${INSTALL_NS_CLONER:-true}" = "true" ]; then
          echo "üîÑ Installing NS Cloner..."
          su -s /bin/sh www-data -c "wp plugin install ns-cloner-site-copier --activate --allow-root" || echo "‚ö†Ô∏è NS Cloner installation failed, continuing..."
        fi
        
        # Always install WP Super Cache (replaces WP Rocket)
        echo "‚ö° Installing WP Super Cache..."
        
        # Ensure permissions are correct before plugin installation
        echo "üîß Ensuring permissions before WP Super Cache installation..."
        chmod -R 775 /var/www/html/wp-content/uploads || echo "‚ö†Ô∏è Uploads chmod failed, continuing..."
        chown -R www-data:www-data /var/www/html/wp-content/uploads || echo "‚ö†Ô∏è Uploads ownership failed, continuing..."
        
        su -s /bin/sh www-data -c "wp plugin install wp-super-cache --activate --allow-root" || echo "‚ö†Ô∏è WP Super Cache installation failed, continuing..."
        
        # Step 3.5: Network activate plugins for multisite
        echo "üåê Network activating plugins for multisite..."
        
        # Fix permissions before network activation to prevent plugin errors
        echo "üîß Ensuring plugin directories are writable..."
        chmod -R 775 /var/www/html/wp-content/uploads || echo "‚ö†Ô∏è Uploads chmod failed, continuing..."
        chown -R www-data:www-data /var/www/html/wp-content/uploads || echo "‚ö†Ô∏è Uploads ownership failed, continuing..."
        
        # Specifically fix unlimited_elements_cache before plugin operations
        if [ -d "/var/www/html/wp-content/uploads/unlimited_elements_cache" ]; then
          echo "üîß Pre-fixing unlimited_elements_cache permissions..."
          chmod -R 775 /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "‚ö†Ô∏è Cache pre-fix failed, continuing..."
          chown -R www-data:www-data /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "‚ö†Ô∏è Cache pre-ownership failed, continuing..."
        fi
        
        su -s /bin/sh www-data -c "wp plugin activate wordfence --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è Wordfence network activation failed, continuing..."
        su -s /bin/sh www-data -c "wp plugin activate wordpress-seo --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è Yoast SEO network activation failed, continuing..."
        su -s /bin/sh www-data -c "wp plugin activate contact-form-7 --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è Contact Form 7 network activation failed, continuing..."
        su -s /bin/sh www-data -c "wp plugin activate woocommerce --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è WooCommerce network activation failed, continuing..."
        su -s /bin/sh www-data -c "wp plugin activate elementor --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è Elementor network activation failed, continuing..."
        su -s /bin/sh www-data -c "wp plugin activate google-site-kit --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è Google Site Kit network activation failed, continuing..."
        su -s /bin/sh www-data -c "wp plugin activate updraftplus --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è UpdraftPlus network activation failed, continuing..."
        su -s /bin/sh www-data -c "wp plugin activate ns-cloner-site-copier --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è NS Cloner network activation failed, continuing..."
        su -s /bin/sh www-data -c "wp plugin activate wp-super-cache --network --allow-root" 2>/dev/null || echo "‚ö†Ô∏è WP Super Cache network activation failed, continuing..."
        
        # Step 4: Install and activate themes
        echo "üé® Installing themes..."
        
        # Hello Elementor theme
        echo "üé® Installing Hello Elementor theme..."
        su -s /bin/sh www-data -c "wp theme install hello-elementor --activate --allow-root" || echo "‚ö†Ô∏è Hello Elementor theme installation failed, continuing..."
        
        # Twenty Twenty-Four theme
        echo "üé® Installing Twenty Twenty-Four theme..."
        su -s /bin/sh www-data -c "wp theme install twentytwentyfour --allow-root" || echo "‚ö†Ô∏è Twenty Twenty-Four theme installation failed, continuing..."
        
        # Step 4.5: Network activate themes for multisite
        echo "üåê Network activating themes for multisite..."
        
        # Fix permissions before theme activation
        echo "üîß Ensuring theme directories are writable..."
        chmod -R 775 /var/www/html/wp-content/themes || echo "‚ö†Ô∏è Themes chmod failed, continuing..."
        chown -R www-data:www-data /var/www/html/wp-content/themes || echo "‚ö†Ô∏è Themes ownership failed, continuing..."
        
        # Network activate themes with better error handling
        echo "üåê Activating Hello Elementor theme network-wide..."
        su -s /bin/sh www-data -c "wp theme activate hello-elementor --network --allow-root" 2>/dev/null && echo "‚úÖ Hello Elementor network activated" || echo "‚ö†Ô∏è Hello Elementor network activation failed (may already be active), continuing..."
        
        # Check if theme is network active
        if su -s /bin/sh www-data -c "wp theme list --status=active --network --allow-root" 2>/dev/null | grep -q "hello-elementor"; then
          echo "‚úÖ Hello Elementor is network active"
        else
          echo "‚ö†Ô∏è Hello Elementor not network active, but continuing..."
        fi
        
        # Step 5: Create Must-Use plugin for upload limits
        echo "üîß Creating Must-Use plugin for upload limits..."
        mkdir -p /var/www/html/wp-content/mu-plugins || echo "MU plugins dir creation failed, continuing..."
        echo '<?php' > /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo 'MU plugin creation failed, continuing...'
        echo '// Force Upload Limits - Must Use Plugin' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo 'MU plugin creation failed, continuing...'
        echo 'add_filter("upload_size_limit", function() { return 67108864; }, 999);' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo 'MU plugin creation failed, continuing...'
        echo 'add_filter("wp_max_upload_size", function() { return 67108864; }, 999);' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo 'MU plugin creation failed, continuing...'
        echo 'add_action("init", function() { @ini_set("upload_max_filesize", "64M"); @ini_set("post_max_size", "64M"); });' >> /var/www/html/wp-content/mu-plugins/force-upload-limits.php || echo 'MU plugin creation failed, continuing...'
        chown www-data:www-data /var/www/html/wp-content/mu-plugins/force-upload-limits.php 2>/dev/null || echo 'MU plugin ownership failed, continuing...'
        
        # Step 6: Final configuration
        echo "‚öôÔ∏è Applying final configuration..."
        
        # Update WordPress options
        su -s /bin/sh www-data -c "wp option update blogname '\${WORDPRESS_TITLE}' --allow-root" || echo "‚ö†Ô∏è Blog name update failed, continuing..."
        su -s /bin/sh www-data -c "wp option update blogdescription 'WordPress Multisite Installation' --allow-root" || echo "‚ö†Ô∏è Blog description update failed, continuing..."
        
        # Ensure unlimited_elements_cache is writable after plugin installation
        echo "üîß Fixing plugin cache directory permissions..."
        
        # Fix unlimited_elements_cache directory specifically
        if [ -d "/var/www/html/wp-content/uploads/unlimited_elements_cache" ]; then
          echo "üîß Fixing unlimited_elements_cache permissions..."
          chmod -R 775 /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "‚ö†Ô∏è Cache directory chmod failed, continuing..."
          chown -R www-data:www-data /var/www/html/wp-content/uploads/unlimited_elements_cache || echo "‚ö†Ô∏è Cache directory ownership failed, continuing..."
          
          # Create index.html to prevent directory listing
          echo "<!-- Directory listing disabled -->" > /var/www/html/wp-content/uploads/unlimited_elements_cache/index.html || echo "‚ö†Ô∏è Index file creation failed, continuing..."
          chown www-data:www-data /var/www/html/wp-content/uploads/unlimited_elements_cache/index.html || echo "‚ö†Ô∏è Index file ownership failed, continuing..."
        fi
        
        # Final comprehensive permission fix
        echo "üîß Applying final comprehensive permission fix..."
        chmod -R 775 /var/www/html/wp-content/uploads || echo "‚ö†Ô∏è Final uploads chmod failed, continuing..."
        chown -R www-data:www-data /var/www/html/wp-content/uploads || echo "‚ö†Ô∏è Final uploads ownership failed, continuing..."
        
        # Verify key directories are writable
        echo "üîç Verifying directory permissions..."
        if [ -w "/var/www/html/wp-content/uploads/unlimited_elements_cache" ]; then
          echo "‚úÖ unlimited_elements_cache is writable"
        else
          echo "‚ö†Ô∏è unlimited_elements_cache is not writable, attempting final fix..."
          chmod 775 /var/www/html/wp-content/uploads/unlimited_elements_cache 2>/dev/null || echo "‚ö†Ô∏è Final cache fix failed"
        fi
        
        echo "üéâ WordPress multisite initialization completed successfully!"
        echo "üìã Summary:"
        echo "   - Upload directories created and secured"
        echo "   - WordPress multisite installed and configured"
        echo "   - Essential plugins installed and network activated"
        echo "   - Themes installed and network activated"
        echo "   - Upload limits configured via MU plugin"
        echo "   - Security measures applied"
        echo "   - Plugin cache directories properly configured"
    networks:
      - wordpress_network

  # ‚îÄ‚îÄ DATABASE ‚îÄ‚îÄ
  db:
    image: mariadb:${MARIADB_VERSION:-11.5}
    restart: "on-failure:3"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${WORDPRESS_DB_NAME}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - wordpress_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 30s
      retries: 15
      start_period: 60s
      interval: 10s

  # ‚îÄ‚îÄ REDIS ‚îÄ‚îÄ
  redis:
    image: redis:${REDIS_VERSION:-alpine}
    restart: "on-failure:3"
    volumes:
      - redis_data:/data
    networks:
      - wordpress_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 15s
      retries: 10
      start_period: 30s
      interval: 10s

  # ‚îÄ‚îÄ WORDPRESS ‚îÄ‚îÄ
  wordpress:
    image: wordpress:latest
    restart: "on-failure:3"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${EXTERNAL_PORT:-8080}:80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # PHP upload configuration via environment variables (official WordPress image)
      WORDPRESS_UPLOAD_LIMIT: ${UPLOAD_MAX_FILESIZE:-64M}
      WORDPRESS_MEMORY_LIMIT: ${MEMORY_LIMIT:-256M}
      # Try PHP environment variables
      PHP_UPLOAD_MAX_FILESIZE: ${UPLOAD_MAX_FILESIZE:-64M}
      PHP_POST_MAX_SIZE: ${POST_MAX_SIZE:-64M}
      PHP_MEMORY_LIMIT: ${MEMORY_LIMIT:-256M}
      WORDPRESS_CONFIG_EXTRA: |
        if (!defined('WP_REDIS_HOST')) define('WP_REDIS_HOST', 'redis');
        if (!defined('WP_REDIS_PORT')) define('WP_REDIS_PORT', 6379);
        if (!defined('WP_REDIS_DATABASE')) define('WP_REDIS_DATABASE', 0);
        if (!defined('WP_REDIS_PASSWORD')) define('WP_REDIS_PASSWORD', '');
        if (!defined('WP_CACHE')) define('WP_CACHE', true);
        
        # Increase upload limits for high-resolution images
        define('WP_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        define('WP_MAX_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        
        # Force PHP upload settings - using override approach
        @ini_set('upload_max_filesize', '${UPLOAD_MAX_FILESIZE:-64M}');
        @ini_set('post_max_size', '${POST_MAX_SIZE:-64M}');
        @ini_set('memory_limit', '${MEMORY_LIMIT:-256M}');
        @ini_set('max_execution_time', '${MAX_EXECUTION_TIME:-300}');
        @ini_set('max_input_vars', '${MAX_INPUT_VARS:-3000}');
        
        # Upload limits handled by Must-Use plugin (see wp-content/mu-plugins/force-upload-limits.php)
        
        # WordPress constants for upload handling
        if (!defined('WP_MEMORY_LIMIT')) define('WP_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        if (!defined('WP_MAX_MEMORY_LIMIT')) define('WP_MAX_MEMORY_LIMIT', '${MEMORY_LIMIT:-256M}');
        
        if (!defined('WP_DEBUG')) define('WP_DEBUG', false);
        if (!defined('WP_DEBUG_LOG')) define('WP_DEBUG_LOG', false);
    volumes:
      - wordpress_data:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./plugins:/var/www/html/wp-content/plugins
      - ./themes:/var/www/html/wp-content/themes
    networks:
      - wordpress_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-admin/install.php"]
      timeout: 20s
      retries: 10
      start_period: 60s
      interval: 15s

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  wordpress_data:
    driver: local

networks:
  wordpress_network:
    driver: bridge 